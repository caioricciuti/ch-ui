name: Build and Push Docker Image

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'  # Trigger on version tags
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - 'public/**'
      - 'package*.json'
      - 'bun.lock'
      - 'Dockerfile*'
      - 'inject-env.cjs'
      - '.github/workflows/docker-build.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job to determine what changed and if we should build
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      docker: ${{ steps.filter.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            docker:
              - 'src/**'
              - 'public/**'
              - 'package*.json'
              - 'bun.lock'
              - 'Dockerfile*'
              - 'inject-env.cjs'

  build:
    needs: [changes]
    if: ${{ needs.changes.outputs.docker == 'true' || github.event_name == 'push' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # For attestation and signing
      security-events: write  # For security scanning
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better metadata

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.2.2'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:latest
          buildkitd-flags: --debug

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Latest tag for default branch
            type=raw,value=latest,enable={{is_default_branch}}
            
            # Edge tag for main branch (for early adopters)
            type=edge,branch=main
            
            # Branch tags
            type=ref,event=branch
            
            # Semantic versioning (when using tags like v1.6.0)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
            
            # SHA tags for precise tracking
            type=sha,format=long
            type=sha,format=short,prefix=sha-
            
            # PR tags (not pushed, just for testing)
            type=ref,event=pr
            
            # Date-based tags for nightly builds
            type=schedule,pattern=nightly-{{date 'YYYYMMDD'}}
            type=schedule,pattern={{date 'YYYYMMDD-HHmmss' tz='UTC'}}
          labels: |
            org.opencontainers.image.title=CH-UI
            org.opencontainers.image.description=A modern, feature-rich web interface for ClickHouse databases
            org.opencontainers.image.vendor=Caio Ricciuti
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.documentation=https://ch-ui.com
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            maintainer=caio.ricciuti@outlook.com

      - name: Determine build configuration
        id: build_config
        run: |
          # Determine Dockerfile
          if [ -f "Dockerfile.bun" ]; then
            echo "dockerfile=Dockerfile.bun" >> $GITHUB_OUTPUT
            echo "variant=bun" >> $GITHUB_OUTPUT
            echo "📦 Using Bun Dockerfile for faster builds"
          else
            echo "dockerfile=Dockerfile" >> $GITHUB_OUTPUT
            echo "variant=standard" >> $GITHUB_OUTPUT
            echo "📦 Using standard Dockerfile"
          fi
          
          # Extract version from package.json
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📌 Version: $VERSION"
          
          # Determine if this is a stable release
          if [[ "${{ github.ref }}" == refs/tags/v* ]] && [[ ! "${{ github.ref }}" == *"-"* ]]; then
            echo "stable=true" >> $GITHUB_OUTPUT
            echo "✅ Stable release detected"
          else
            echo "stable=false" >> $GITHUB_OUTPUT
            echo "🚧 Development build"
          fi

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ steps.build_config.outputs.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: false
          load: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=${{ github.event_name != 'pull_request' }}
          build-args: |
            VERSION=${{ steps.build_config.outputs.version }}
            COMMIT_SHA=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            BUILD_NUMBER=${{ github.run_number }}
            BUILD_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          provenance: true
          sbom: true

      - name: Export digest
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
          echo "Digest: $digest"

      - name: Scan for vulnerabilities
        uses: aquasecurity/trivy-action@master
        if: github.event_name != 'pull_request'
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail the build, just report

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name != 'pull_request'
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'container-security'

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        if: github.event_name != 'pull_request'
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        if: github.event_name != 'pull_request'
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 30

      - name: Push Docker image
        if: github.event_name != 'pull_request'
        id: push
        run: |
          # Create manifest and push
          docker buildx imagetools create \
            $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
          
          echo "✅ Image pushed successfully"

      - name: Sign the container image
        if: ${{ github.event_name != 'pull_request' && steps.build_config.outputs.stable == 'true' }}
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          # Sign the image with cosign
          echo "🔏 Signing container image..."
          cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}

      - name: Generate build report
        if: always()
        run: |
          echo "# 📊 Docker Build Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🏗️ Build Information" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Version | \`${{ steps.build_config.outputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Variant | \`${{ steps.build_config.outputs.variant }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Stable | ${{ steps.build_config.outputs.stable == 'true' && '✅ Yes' || '🚧 No' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Platforms | \`linux/amd64, linux/arm64\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Registry | \`${{ env.REGISTRY }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            echo "## 🏷️ Docker Tags" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "# Pull the image:" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
              echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            fi
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            echo "## 🔐 Security" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Vulnerability scan completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ SBOM generated" >> $GITHUB_STEP_SUMMARY
            if [ "${{ steps.build_config.outputs.stable }}" == "true" ]; then
              echo "- ✅ Image signed with cosign" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📝 Commit Information" >> $GITHUB_STEP_SUMMARY
          echo "- SHA: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Author: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- Message: ${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Docker build failed!" >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs for more information." >> $GITHUB_STEP_SUMMARY